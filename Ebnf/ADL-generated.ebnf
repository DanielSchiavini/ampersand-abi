pContext ::= 'CONTEXT' pConceptName pLanguageRef pTextMarkup? pContextElement* 'ENDCONTEXT'
    pContextElement ::= pMeta | pPatternDef | pProcessDef | pRuleDef | pClassify | pRelationDef | pConceptDef | pGenDef | pIndex | pViewDef | pInterface | pSqlplug | pPhpplug | pPurpose | pPopulation | pPrintThemes | pIncludeStatement
pIncludeStatement ::= 'INCLUDE' pString
pLanguageRef ::= 'IN' ('DUTCH' | 'ENGLISH')
pTextMarkup ::= 'REST' | 'HTML' | 'LATEX' | 'MARKDOWN'
pMeta ::= 'META' pString pString
pPatternDef ::= 'PATTERN' pConceptName pPatElems* 'ENDPATTERN'
    pPatElem ::= pRuleDef | pClassify | pRelationDef | pConceptDef | pGenDef | pIndex | pViewDef | pPurpose | pPopulation
pProcessDef ::= 'PROCESS' pConceptName pProcElem* 'ENDPROCESS'
    pProcElem ::= pRuleDef | pClassify | pRelationDef | pRoleRule | pRoleRelation | pConceptDef | pGenDef | pIndex | pViewDef | pPurpose | pPopulation
pClassify ::= 'CLASSIFY' pConceptRef 'IS' pCterm
                 pCterm ::= pCterm1 ('/\' pCterm1)*
                 pCterm1 ::= pConceptRef | ('('? pCterm ')'?)
pRuleDef ::= 'RULE' (pADLid ':'?)? pRule pMeaning* pMessage* pViolation?
                 pViolation ::= 'VIOLATION' pPairView
                 pPairView ::= '(' pPairViewSegmentList1Sep ')'
                 pPairViewSegmentList1Sep  ::= pPairViewSegment (',' pPairViewSegment)*
                 pPairViewSegment ::= pSrcOrTgt pTerm | 'TXT' pString
pSrcOrTgt ::= 'SRC' | 'TGT'
pRelationDef ::= (pVarid '::' pConceptRef pFun pConceptRef | 'RELATION' pVarid pSign) 'BYPLUG'? pProps? 'BYPLUG' pPragma? pMeaning* ('=' pContent)? '.'?
                          pProps ::= '[' pPropListSep? ']'
                          pPropListSep ::= pProp (',' pProp)*
                          pProp ::= 'UNI' | 'INJ' | 'SUR' | 'TOT' | 'SYM' | 'ASY' | 'TRN' | 'RFX' | 'IRF' | 'AUT' | 'PROP'
                          pPragma ::= 'PRAGMA' pString+
                          pFun ::= '*' | '->' | '<-' | '[' pMult '-' pMult ']'
                                pMult ::= ('0' | '1') '..' ('1' | '*') | '*' | '1'
pConceptDef ::= 'CONCEPT' pConceptName 'BYPLUG'? pString ('TYPE' pString)? pString?
pGenDef ::= 'SPEC' pConceptRef 'ISA' pConceptRef | 'CLASSIFY' pConceptRef 'ISA' pConceptRef | pClassify
pIndex ::= 'IDENT' pLabel pConceptRefPos pSpec '(' pIndSegmentListSep ')'
          pIndSegmentListSep ::= pIndSegment (',' pIndSegment)
          pIndSegment ::= pIndAtt
          pIndAtt ::= pLabelProps pTerm | pTerm
pViewDef ::= ('VIEW' | 'KEY') pLabelProps pConceptOneRefPos '(' pViewSegmentSepList ')'
          pViewSegmentSepList ::= pViewSegment (',' pViewSegment)*
          pViewSegment ::= pViewAtt | 'TXT' pString | 'PRIMHTML' pString
          pViewAtt ::= pLabelProps? pTerm
pInterface ::= 'INTERFACE' pADLid 'CLASS'? (pConid | pString) pParams? pInterfaceArgs? pRoles? pKey ':' pTerm pSubInterface
          pParams ::= '(' pRelSignListSep ')'
          pInterfaceArgs ::= '{' pADLidListList '}'
          pRoles  ::= 'FOR' pADLidList
pSubInterface ::= ('BOX' | 'ROWS' | 'COLS') pBOX | 'INTERFACE' pADLid
pMeaning
pMessage
pRelSignListSep ::= pRelSign (',' pRelSign)*
pRelSign ::= pVarid pSign?
pSign ::= '[' pConceptOneRef ('*' pConceptOneRef)? ']'
pConceptName ::= pConid | pString
pConceptRef ::= pConceptName
pConceptOneRef ::= 'ONE' | pConceptRef
pConceptRefPos ::= pConid | pString
pConceptOneRefPos ::= 'ONE' | pConid | pString
pLabelProps ::= pADLid pLabelPropsArgs? ':'
                          pLabelPropsArgs ::= '{' pADLidListList '}'
pLabel ::= pADLid ':'
pContent ::= '[' pRecordList? ']' | '[' pRecordObsList? ']'
    pRecordList ::= pRecord (',' pRecord)*
    pRecord ::= pValue '*' pValue
    pRecordObsList ::= pRecordObsList (';' pRecordObsList)
    pRecordObs ::= '(' pString ',' pString ')'
pValue ::= pAtom | pConid | pVarid | pInteger (pConid | pVarid)?
pADLid ::= pVarid | pConid | pString
pADLidListList ::= pADLid+ (',' pADLid+)*
pADLid ::= Varid | Conid | String
String ::= '"' Any* '"'
Expl ::= '{+' Any* '-}'
Atom ::= "'" Any* "'"
Digit ::= ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')
Integer10 ::= ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Digit*
Integer8 ::= ('00' | '0o') Digit+
Integer16 ::= ('0x' | '0X') Digit+
Varid ::= (isLower | '_') (Char | '_')*
Conid ::= isUpper (Char | '_')*
Integer ::= Integer10 | Integer8 | Integer16
Comma ::= ','
Semi ::= ';'
