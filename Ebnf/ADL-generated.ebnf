Context ::= 'CONTEXT' ConceptName LanguageRef TextMarkup? ContextElement* 'ENDCONTEXT'
    ContextElement ::= Meta | PatternDef | ProcessDef | RuleDef | Classify | RelationDef | ConceptDef | GenDef | Index | ViewDef | Interface | Sqlplug | Phpplug | Purpose | Population | PrintThemes | IncludeStatement
IncludeStatement ::= 'INCLUDE' String
LanguageRef ::= 'IN' ('DUTCH' | 'ENGLISH')
TextMarkup ::= 'REST' | 'HTML' | 'LATEX' | 'MARKDOWN'
Meta ::= 'META' String String
PatternDef ::= 'PATTERN' ConceptName PatElems* 'ENDPATTERN'
    PatElem ::= RuleDef | Classify | RelationDef | ConceptDef | GenDef | Index | ViewDef | Purpose | Population
ProcessDef ::= 'PROCESS' ConceptName ProcElem* 'ENDPROCESS'
    ProcElem ::= RuleDef | Classify | RelationDef | RoleRule | RoleRelation | ConceptDef | GenDef | Index | ViewDef | Purpose | Population
Classify ::= 'CLASSIFY' ConceptRef 'IS' Cterm
                 Cterm ::= Cterm1 ('/\' Cterm1)*
                 Cterm1 ::= ConceptRef | ('('? Cterm ')'?)
RuleDef ::= 'RULE' (ADLid ':'?)? Rule Meaning* Message* Violation?
                 Violation ::= 'VIOLATION' PairView
                 PairView ::= '(' PairViewSegmentList ')'
                 PairViewSegmentList  ::= PairViewSegment (',' PairViewSegment)*
                 PairViewSegment ::= SrcOrTgt Term | 'TXT' String
SrcOrTgt ::= 'SRC' | 'TGT'
RelationDef ::= (Varid '::' ConceptRef Fun ConceptRef | 'RELATION' Varid Sign) 'BYPLUG'? Props? 'BYPLUG' Pragma? Meaning* ('=' Content)? '.'?
                          Props ::= '[' PropList? ']'
                          PropList ::= Prop (',' Prop)*
                          Prop ::= 'UNI' | 'INJ' | 'SUR' | 'TOT' | 'SYM' | 'ASY' | 'TRN' | 'RFX' | 'IRF' | 'AUT' | 'PROP'
                          Pragma ::= 'PRAGMA' String+
                          Fun ::= '*' | '->' | '<-' | '[' Mult '-' Mult ']'
                                Mult ::= ('0' | '1') '..' ('1' | '*') | '*' | '1'
ConceptDef ::= 'CONCEPT' ConceptName 'BYPLUG'? String ('TYPE' String)? String?
GenDef ::= 'SPEC' ConceptRef 'ISA' ConceptRef | 'CLASSIFY' ConceptRef 'ISA' ConceptRef | Classify
Index ::= 'IDENT' Label ConceptRefPos Spec '(' IndSegmentList ')'
          IndSegmentList ::= IndSegment (',' IndSegment)
          IndSegment ::= IndAtt
          IndAtt ::= LabelProps Term | Term
ViewDef ::= ('VIEW' | 'KEY') LabelProps ConceptOneRefPos '(' ViewSegmentSepList ')'
          ViewSegmentSepList ::= ViewSegment (',' ViewSegment)*
          ViewSegment ::= ViewAtt | 'TXT' String | 'PRIMHTML' String
          ViewAtt ::= LabelProps? Term
Interface ::= 'INTERFACE' ADLid 'CLASS'? (Conid | String) Params? InterfaceArgs? Roles? Key ':' Term SubInterface
          Params ::= '(' RelSignList ')'
          InterfaceArgs ::= '{' ADLidListList '}'
          Roles ::= 'FOR' ADLidList
SubInterface ::= ('BOX' | 'ROWS' | 'COLS') BOX | 'INTERFACE' ADLid
ObjDef ::= LabelProps Term SubInterface?
Box ::= '[' pObjDefList ']'
Sqlplug ::= 'SQLPLUG' ObjDef
Phpplug ::= 'PHPPLUG' ObjDef
Purpose ::= 'PURPOSE' Ref2Obj LanguageRef? TextMarkup? ('REF' StringListSemi)? Expl
       Ref2Obj ::= 'CONCEPT' ConceptName | 'RELATION' RelSign | 'RULE' ADLid | 'IDENT' ADLid | 'VIEW' ADLid | 'PATTERN' ADLid | 'PROCESS' ADLid | 'INTERFACE' ADLid | 'CONTEXT' ADLid
pPopulation ::= 'POPULATION' RelSign 'CONTAINS' Content | 'POPULATION' ConceptName 'CONTAINS' '[' ValueList ']'
RoleRelation ::= 'ROLE' ADLidList 'EDITS' RelSignList
RoleRule ::= 'ROLE' ADLidList 'MAINTAINS' ADLidList
PrintThemes ::= 'THEMES' ConceptNameList
Meaning ::= 'MEANING' LanguageRef? TextMarkup? (String | Expl)
Message ::= 'MESSAGE' LanguageRef? TextMarkup? (String | Expl)
Rule ::= Term ('=' Term | '|-' Term)?
Term ::= Trm2 (('\/' Trm2)* | ('\/' Trm2)*)?
Trm2 ::= Trm3 ('-' Trm3)?
Trm3 ::= Trm4 ('/' Trm4 | '\' Trm4 | '<>' Trm4)?
Trm5 ((';' Trm5)+ | ('!' Trm5)+ | ('#' Trm5)+)?
Trm5 ::= '-'* Trm6 ('~' | '*' | '+')*
Trm6 ::= Relation | '(' Term ')'
RelationRef ::= RelSign | 'I' ('[' ConceptOneRef ']')? | 'V' Sign? | Atom ('[' ConceptOneRef ']')?
RelSignList ::= RelSign (',' RelSign)*
RelSign ::= Varid Sign?
Sign ::= '[' ConceptOneRef ('*' ConceptOneRef)? ']'
ConceptName ::= Conid | String
ConceptNameList ::= ConceptName (',' ConceptName)
ConceptRef ::= ConceptName
ConceptOneRef ::= 'ONE' | ConceptRef
ConceptRefPos ::= Conid | String
ConceptOneRefPos ::= 'ONE' | Conid | String
LabelProps ::= ADLid LabelPropsArgs? ':'
                          LabelPropsArgs ::= '{' ADLidListList '}'
Label ::= ADLid ':'
Content ::= '[' RecordList? ']' | '[' RecordObsList? ']'
    RecordList ::= Record (',' Record)*
    Record ::= Value '*' Value
    RecordObsList ::= RecordObsList (';' RecordObsList)
    RecordObs ::= '(' String ',' String ')'
ValueList ::= Value (',' Value)*
Value ::= Atom | Conid | Varid | Integer (Conid | Varid)?
ADLid ::= Varid | Conid | String
ADLidList ::= ADLid (',' ADLid)*
ADLidListList ::= ADLid+ (',' ADLid+)*
ADLid ::= Varid | Conid | String
String ::= '"' Any* '"'
StringListSemi ::= String (';' String)*
Expl ::= '{+' Any* '-}'
Atom ::= "'" Any* "'"
Digit ::= ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')
Integer10 ::= ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') Digit*
Integer8 ::= ('00' | '0o') Digit+
Integer16 ::= ('0x' | '0X') Digit+
Varid ::= (isLower | '_') (Char | '_')*
Conid ::= isUpper (Char | '_')*
Integer ::= Integer10 | Integer8 | Integer16
Comma ::= ','
Semi ::= ';'
