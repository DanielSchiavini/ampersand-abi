Populations ::= Population+
Context ::= 'CONTEXT' ConceptName LanguageRef TextMarkup? ContextElement* 'ENDCONTEXT'
ContextElement ::= Meta | PatternDef | ProcessDef | RuleDef | Classify | RelationDef | ConceptDef | GenDef | Index | ViewDef | Interface | Sqlplug | Phpplug | Purpose | Population | PrintThemes | IncludeStatement
IncludeStatement ::= 'INCLUDE' String
LanguageRef ::= 'IN' ('DUTCH' | 'ENGLISH')
TextMarkup ::= 'REST' | 'HTML' | 'LATEX' | 'MARKDOWN'
Meta ::= 'META' String String
PatternDef ::= 'PATTERN' ConceptName PatElem* 'ENDPATTERN'
PatElem ::= RuleDef | Classify | RelationDef | ConceptDef | GenDef | Index | ViewDef | Purpose | Population
ProcessDef ::= 'PROCESS' ConceptName ProcElem* 'ENDPROCESS'
ProcElem ::= RuleDef | Classify | RelationDef | RoleRule | RoleRelation | ConceptDef | GenDef | Index | ViewDef | Purpose | Population
Classify ::= 'CLASSIFY' ConceptRef 'IS' Cterm
Cterm ::= Cterm1 ('/\' Cterm1)*
Cterm1 ::= ConceptRef | ('('? Cterm ')'?)
RuleDef ::= 'RULE' (ADLid ':')? Rule Meaning* Message* Violation?
Violation ::= 'VIOLATION' PairView
PairView ::= '(' PairViewSegmentList ')'
PairViewSegmentList ::= PairViewSegment (',' PairViewSegment)*
PairViewSegment ::= 'SRC' Term | 'TGT' Term | 'TXT' String
RelationDef ::= (RelationNew | RelationOld) 'BYPLUG'? Props? 'BYPLUG'? ('PRAGMA' String+)? Meaning* ('=' Content)? '.'?
RelationNew ::= 'RELATION' Varid Sign
RelationOld ::= Varid '::' ConceptRef Fun ConceptRef
Props ::= '[' PropList? ']'
PropList ::= Prop (',' Prop)*
Prop ::= 'UNI' | 'INJ' | 'SUR' | 'TOT' | 'SYM' | 'ASY' | 'TRN' | 'RFX' | 'IRF' | 'AUT' | 'PROP'
Fun ::= '*' | '->' | '<-' | '[' Mults ']'
Mults ::= Mult '-' Mult
Mult ::= ('0' | '1') '..' ('1' | '*') | '*' | '1'
ConceptDef ::= 'CONCEPT' ConceptName 'BYPLUG'? String ('TYPE' String)? String?
GenDef ::= ('CLASSIFY' | 'SPEC') ConceptRef 'ISA' ConceptRef
Index ::= 'IDENT' Label ConceptRefPos '(' IndSegmentList ')'
IndSegmentList ::= IndSegment (',' IndSegment)
IndSegment ::= IndAtt
IndAtt ::= LabelProps Term | Term
ViewDef ::= FancyViewDef | ViewDefLegacy
FancyViewDef ::= 'VIEW' pLabel ConceptOneRefPos 'DEFAULT'? '{' ViewObjList '}' HtmlView? 'ENDVIEW'
ViewObjList ::= ViewObj (',' ViewObj)*
ViewObj ::= Label Term
HtmlView ::= 'HTML' 'TEMPLATE' String
ViewDefLegacy ::= ('VIEW' | 'KEY') LabelProps ConceptOneRefPos '(' ViewSegmentList ')'
ViewSegmentList ::= ViewSegment (',' ViewSegment)*
ViewSegment ::= ViewAtt | 'TXT' String | 'PRIMHTML' String
ViewAtt ::= LabelProps? Term
Interface ::= 'INTERFACE' ADLid 'CLASS'? (Conid | String) Params? InterfaceArgs? Roles? ':' Term SubInterface
Params ::= '(' NamedRel ')'
InterfaceArgs ::= '{' ADLidListList '}'
Roles ::= 'FOR' RoleList
SubInterface ::= ('BOX' ('<' Conid '>')? | 'ROWS' | 'COLS') Box | 'INTERFACE' ADLid
ObjDef ::= LabelProps Term ('<' Conid '>')? SubInterface?
ObjDefList ::= ObjDef (',' ObjDef)*
Box ::= '[' ObjDefList ']'
Sqlplug ::= 'SQLPLUG' ObjDef
Phpplug ::= 'PHPPLUG' ObjDef
Purpose ::= 'PURPOSE' Ref2Obj LanguageRef? TextMarkup? ('REF' StringListSemi)? Expl
Ref2Obj ::= 'CONCEPT' ConceptName | 'RELATION' RelSign | 'RULE' ADLid | 'IDENT' ADLid | 'VIEW' ADLid | 'PATTERN' ADLid | 'PROCESS' ADLid | 'INTERFACE' ADLid | 'CONTEXT' ADLid
Population ::= 'POPULATION' NamedRel 'CONTAINS' Content | 'POPULATION' ConceptName 'CONTAINS' '[' ValueList ']'
RoleRelation ::= 'ROLE' RoleList 'EDITS' NamedRelList
RoleRule ::= 'ROLE' RoleList 'MAINTAINS' ADLidList
Role ::= ADLid
RoleList ::= Role (',' Role)*
PrintThemes ::= 'THEMES' ConceptNameList
Meaning ::= 'MEANING' LanguageRef? TextMarkup? (String | Expl)
Message ::= 'MESSAGE' Markup
Rule ::= Term ('=' Term | '|-' Term)?
Term ::= Trm2 (('/\' Trm2)+ | ('\/' Trm2)+)?
Trm2 ::= Trm3 ('-' Trm3)?
Trm3 ::= Trm4 ('/' Trm4 | '\' Trm4 | '<>' Trm4)?
Trm4 ::= Trm5 ((';' Trm5)+ | ('!' Trm5)+ | ('#' Trm5)+)?
Trm5 ::= '-'* Trm6 ('~' | '*' | '+')*
Trm6 ::= RelationRef | '(' Term ')'
RelationRef ::= RelSign | 'I' ('[' ConceptOneRef ']')? | 'V' Sign? | Atom ('[' ConceptOneRef ']')?
NamedRelList ::= NamedRel (',' NamedRel)*
NamedRel ::= Varid Sign?
Sign ::= '[' ConceptOneRef ('*' ConceptOneRef)? ']'
ConceptName ::= Conid | String
ConceptNameList ::= ConceptName (',' ConceptName)
ConceptRef ::= ConceptName
ConceptOneRef ::= 'ONE' | ConceptRef
LabelProps ::= ADLid ('{' ADLidListList '}')? ':'
Label ::= ADLid ':'
Content ::= '[' RecordList? ']' | '[' RecordObsList? ']'
RecordList ::= Record (',' Record)*
Record ::= String '*' String
RecordObsList ::= RecordObsList (';' RecordObsList)
RecordObs ::= '(' String ',' String ')'
ADLid ::= Varid | Conid | String
ADLidList ::= ADLid (',' ADLid)*
ADLidListList ::= ADLid+ (',' ADLid+)*
Conid ::= UpperChar (Char | '_')*
String ::= '"' Any* '"'
StringListSemi ::= String (';' String)*
Expl ::= '{+' Any* '-}'
Varid ::= (LowerChar | '_') (Char | '_')*